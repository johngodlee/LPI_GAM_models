library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(mgcv)
# Set working directory ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load Data ----
load("LPIdata_Feb2016.RData")
# Convert data to long format and add useful columns ----
LPI <- LPIdata_Feb2016 %>%
gather("year", "pop", 26:70)  %>%  # Transform to long format, gathering each
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(Genus, Species, sep = '_')) %>%  # Create a species column by concatenating genus and species
filter(., is.finite(pop)) %>% # Keep only rows with a population estimate
distinct(.) %>%  # Remove duplicate rows
group_by(., genus_species, id) %>%  # group rows so that each group is one population (id) from one Species(genus_species)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
filter(., lengthyear > 5) %>%  # Exclude columns where dataset <5 years
ungroup(.) %>%  # Remove groupings
group_by(., genus_species, id, Units) %>%  # Groups Measurement_type(Units)>population(id)>Species(genus_species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
# Split the data frame into a list of data frames based on species, collection id, and units of collection ----
# LPI_list <- split(LPI, f = list(LPI$genus_species, LPI$id, LPI$Units))
# This crashes my laptop
# Maybe book some time on the big computer
# LPI_list <- split(LPI, interaction(LPI$genus_species), drop = TRUE)
# This works but will not make decent models as multiple population estimates
LPI_list <- split(LPI, interaction(LPI$genus_species, LPI$id), drop = TRUE)
# This works and should not be any worse that including Units as well
View(LPI_list[[1]])
save.image("~/Desktop/LPI_GAM_models/GlobalEnv.RData")
gam_test <- gam(log10(pop)~year, data = LPI_list[[1]])
summary(gam_test)
lm_list <- lapply(LPI_list, function(x) lm(log10(pop)~year, data = x))
LPI_list_6 <-   LPI_list[sapply(LPI_list, function(df)nrow(df)>6)]
lm_list <- lapply(LPI_list_6, function(x) lm(log10(pop)~year, data = x))
LPI_list_chain <-   LPI_list[sapply(LPI_list, function(df)nrow(df)<6)]
8766+2577
LPI_list_GAM <-   LPI_list[sapply(LPI_list, function(df)nrow(df)>6)]
LPI_list_chain <-   LPI_list[sapply(LPI_list, function(df)nrow(df)=<6)]
LPI_list_GAM <-   LPI_list[sapply(LPI_list, function(df)nrow(df)>=6)]
LPI_list_chain <-   LPI_list[sapply(LPI_list, function(df)nrow(df)<6)]
8962+2577
lm_list <- lapply(LPI_list_6, function(x) gam(log10(pop)~year, data = x))
gam_test <- gam(log10(pop)~year, data = LPI_list[[100]])
summary(gam_test)
gam_test <- gam(log10(pop)~year, data = LPI_list[[1:5]])
gam_test <- gam(log10(pop)~year, data = LPI_list[[3]])
summary(gam_test)
gam_test <- gam(log10(pop)~year, data = LPI_list[[2]])
summary(gam_test)
gam_test <- gam(log10(pop)~year, data = LPI_list[[4]])
summary(gam_test)
gam_test <- gam(log10(pop)~year, data = LPI_list_GAM[[4]])
summary(gam_test)
gam_test <- gam(log10(pop)~year, data = LPI_list_GAM[[2]])
summary(gam_test)
lm_list <- lapply(LPI_list_GAM, function(x) gam(log10(pop)~year, data = x))
LPI_list_GAM <-   is.finite(LPI_list[sapply(LPI_list, function(df)nrow(df)>=6)])
LPI_list_GAM_noNA <- LPI_list_GAM[sapply(LPI_list_GAM, function(df)is.finite(df))]
LPI <- is.finite(LPI)
LPI <- is.finite(LPI)
typeof(LPI)
LPI <- LPIdata_Feb2016 %>%
gather("year", "pop", 26:70)  %>%  # Transform to long format, gathering each
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(Genus, Species, sep = '_')) %>%  # Create a species column by concatenating genus and species
filter(., is.finite(pop)) %>%
filter(., is.finite(year)) %>% # Keep only rows with a population estimate
distinct(.) %>%  # Remove duplicate rows
group_by(., genus_species, id) %>%  # group rows so that each group is one population (id) from one Species(genus_species)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
filter(., lengthyear > 5) %>%  # Exclude columns where dataset <5 years
ungroup(.) %>%  # Remove groupings
group_by(., genus_species, id, Units) %>%  # Groups Measurement_type(Units)>population(id)>Species(genus_species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
LPI_list <- split(LPI, interaction(LPI$genus_species, LPI$id), drop = TRUE)
# This works and should not be any worse that including Units as well
LPI_list_GAM <- LPI_list[sapply(LPI_list, function(df)nrow(df)>=6)]
LPI_list_chain <-   LPI_list[sapply(LPI_list, function(df)nrow(df)<6)]
# Create GAMs and for each element in LPI_list_GAM ----
gam_test <- gam(log10(pop)~year, data = LPI_list_GAM[[2]])
lm_list <- lapply(LPI_list_GAM, function(x) gam(log10(pop)~year, data = x))
?gam.control
lm_list <- lapply(LPI_list_GAM, function(x) lm(log10(pop)~year, data = x))
LPI <- LPIdata_Feb2016 %>%
gather("year", "pop", 26:70)  %>%  # Transform to long format, gathering each
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(Genus, Species, sep = '_')) %>%  # Create a species column by concatenating genus and species
filter(., !is.finite(pop)) %>%
filter(., !is.finite(year)) %>% # Keep only rows with a population estimate
distinct(.) %>%  # Remove duplicate rows
group_by(., genus_species, id) %>%  # group rows so that each group is one population (id) from one Species(genus_species)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
filter(., lengthyear > 5) %>%  # Exclude columns where dataset <5 years
ungroup(.) %>%  # Remove groupings
group_by(., genus_species, id, Units) %>%  # Groups Measurement_type(Units)>population(id)>Species(genus_species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
# Split the data frame into a list of data frames based on species, collection id, and units of collection ----
# LPI_list <- split(LPI, f = list(LPI$genus_species, LPI$id, LPI$Units))
lm_list <- lapply(LPI_list_GAM, function(x) lm(log10(pop)~year, data = x))
summary(gam_test)
gam_test <- lm(log10(pop)~year, data = LPI_list_GAM[[2]])
gam_test <- gam(log10(pop)~year, data = LPI_list_GAM[[2]])
lm_test <- lm(log10(pop)~year, data = LPI_list_GAM[[2]])
summary(lm_test)
summary(gam_test)
lm_list <- sapply(LPI_list_GAM, function(x) lm(log10(pop)~year, data = x))
fitLM <- function(x){
lm1 <- lm(x$mod,data=x$dat)
return(summary(lm1))
}
temp.lm <- lapply(LPI_list_GAM,FUN=fitLM)
temp.lm <- lapply(LPI_list_GAM,FUN=fitLM)
temp.lm <- sapply(LPI_list_GAM,FUN=fitLM)
lm_list <- sapply(LPI_list_GAM, function(x) lm(pop~year, data = x))
lm_list <- sapply(LPI_list_GAM, function(x) gam(pop~year, data = x))
lm_list[[1]]
lm_list[[1]][2]
lm_list[[1:3]]
lm_list[[1:2]]
lm_list[[]][2]
lm_list[[.]][2]
lm_list[1]
head(lm_list)
lm_list
names(lm_list)
gam_list <- sapply(LPI_list_GAM, function(x) gam(pop~year, data = x))
lm_list <- sapply(LPI_list_GAM, function(x) gam(pop~year, data = x))
save.image("~/Desktop/LPI_GAM_models/GlobalEnv.RData")
unlist(lm_list)
lm_unlist <- unlist(lm_list)
View(lm_unlist)
lm_unlist
lm_unlist[[1]]
summary(lm_list[[1]])
?glance
??glance
library(broom)
glance(lm_list[[1]])
glance(lm_list[[1]])
glance(lm_list[[1]][1])
glance(lm_list)
glance(lm_list[[2]])
glance(lm_list[[2]]])
summary(lm_list[[1]])
summary(lm_list[[1]][1])
summary(lm_list[[1]][2])
type_of(lm_list[[1]])
typeof(lm_list[[1]])
lm_list <- sapply(LPI_list_GAM, function(x)lm(pop~year, data = x))
typeof(lm_list[[1]])
lm_list <- lapply(LPI_list_GAM, function(x)lm(pop~year, data = x))
typeof(lm_list[[1]])
lm_list[[1]]
glance(lm_list[[2]]])
glance(lm_list[[2]])
summary(lm_list[[1]])
typeof(lm_list[[1]])
gam_list <- lapply(LPI_list_GAM, function(x) gam(pop~year, data = x))
gam_list[[1]]
typeof(gam_list[[1]])
summary(gam_list[[1]])
summary(lm_list[[1]])
glance(gam_list[[1]])
head(gam_list)
?coef
slope_lm <- lapply(lm_list, coef, object = x)["x"]
slope_lm <- lapply(lm_list, function(X) coef, object = x)["x"]
Q
Q
slope_lm <- lapply(lm_list, function(x) coef, object = x)["x"]
Q
Q
Q
glance(gam_list[[1]])
coef(lm_list[[1]])
slope_lm <- lapply(lm_list, function(x) coef, object = x)["year"]
Q
Q
Q
Q
Q
coef(lm_list[[1]])["year"]
coef(lm_list[[1]])[year]
slope_lm <- lapply(lm_list, function(x) coef(object = x)["year"])
slope_lm <- unlist(lapply(lm_list, function(x) coef(object = x)["year"]))
slope_lm <- lapply(lm_list, function(x) coef(object = x)["year"])
View(slope_lm)
slope_lm <- sapply(lm_list, function(x) coef(object = x)["year"])
View(slope_lm)
ggplot(slope_lm, aes(x = slope_lm)) + geom_histogram()
slope_lm <- lapply(lm_list, function(x) coef(object = x)["year"])
View(slope_lm)
slope_lm <- as.data.frame(lapply(lm_list, function(x) coef(object = x)["year"]))
View(slope_lm)
slope_lm <- as.data.frame(t(lapply(lm_list, function(x) coef(object = x)["year"])))
View(slope_lm)
slope_lm <- as.data.frame(t(lapply(lm_list, function(x) coef(object = x)["year"])))
View(slope_lm)
gather(slope_lm)
slope_lm <- gather(as.data.frame(lapply(lm_list, function(x) coef(object = x)["year"])))
View(slope_lm)
ggplot(slope_lm, aes(x = value)) + geom_histogram()
ggplot(slope_lm, aes(x = value)) + geom_histogram(bins = 10000)
ggplot(slope_lm, aes(x = value)) + geom_histogram(bins = 100)
ggplot(slope_lm, aes(x = value)) + geom_histogram()
ggplot(slope_lm) + geom_histogram(aes(x = value))
slope_lm$value_log <- log(slope_lm$value)
ggplot(slope_lm) + geom_histogram(aes(x = value_log))
ggplot(slope_lm) + geom_density(aes(x = value_log))
ggplot(slope_lm) + geom_histogram(aes(x = value_log))
gam_list <- lapply(LPI_list_GAM, function(x) gam(log(pop)~year, data = x))
# Creating General Additive Models for the LPI, according to Collen et al. (2007)
# John Godlee (johngodlee@gmail.com)
# Packages ----
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(mgcv)
library(broom)
# Set working directory ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load Data ----
load("LPIdata_Feb2016.RData")
col2[which(!is.finite(col2))] = NA
# Convert data to long format and add useful columns ----
LPI <- LPIdata_Feb2016 %>%
gather("year", "pop", 26:70)  %>%  # Transform to long format, gathering each
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(Genus, Species, sep = '_')) %>%  # Create a species column by concatenating genus and species
filter(., is.finite(pop)) %>%  # Keep only rows with a population estimate
distinct(.) %>%  # Remove duplicate rows
group_by(., genus_species, id) %>%  # group rows so that each group is one population (id) from one Species(genus_species)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
filter(., lengthyear > 5) %>%  # Exclude columns where dataset <5 years
ungroup(.) %>%  # Remove groupings
group_by(., genus_species, id, Units) %>%  # Groups Measurement_type(Units)>population(id)>Species(genus_species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
# Split the data frame into a list of data frames based on species, collection id, and units of collection ----
# LPI_list <- split(LPI, f = list(LPI$genus_species, LPI$id, LPI$Units))
# This crashes my laptop
# Maybe book some time on the big computer
# LPI_list <- split(LPI, interaction(LPI$genus_species), drop = TRUE)
# This works but will not make decent models as multiple population estimates
LPI_list <- split(LPI, interaction(LPI$genus_species, LPI$id), drop = TRUE)
# This works and should not be any worse that including Units as well
# View(LPI_list[[1]])
# Subset data frame list to list with n>=6 (GAM) and n<6 (chain)
LPI_list_GAM <- LPI_list[sapply(LPI_list, function(df)nrow(df)>=6)]
LPI_list_chain <-   LPI_list[sapply(LPI_list, function(df)nrow(df)<6)]
# Create GAMs and LMs for each element in LPI_list_GAM ----
## Create test fits with one data frame in the list
gam_test <- gam(log10(pop)~year, data = LPI_list_GAM[[2]])
lm_test <- lm(log10(pop)~year, data = LPI_list_GAM[[2]])
summary(gam_test)
summary(lm_test)
## For the full list
gam_list <- lapply(LPI_list_GAM, function(x) gam(pop~year, data = x))
lm_list <- lapply(LPI_list_GAM, function(x) lm(pop~year, data = x))
## Checking model fits and output examples
lm_list[[1]]
typeof(lm_list[[1]])
summary(lm_list[[1]])
glance(lm_list[[1]])
coef(lm_list[[1]])["year"]
gam_list[[1]]
typeof(gam_list[[1]])
summary(gam_list[[1]])
glance(gam_list[[1]])
slope_lm <- gather(as.data.frame(lapply(lm_list, function(x) coef(object = x)["year"])))
slope_lm$value_log <- log(slope_lm$value)
ggplot(slope_lm) + geom_histogram(aes(x = value_log))
# Average GAMs within each species ----
# Plot results of GAM models ----
save.image("~/Desktop/LPI_GAM_models/GlobalEnv.RData")
