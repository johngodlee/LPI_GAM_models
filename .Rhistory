library(shiny)
library(dplyr)
load("data/LPIdata_Feb2016.RData", envir=.GlobalEnv)
View(LPIdata_Feb2016)
?tabPanel
runApp('~/Google_Drive/Code/R/Shiny/Carbon emissions Shiny_app')
runApp('~/Google_Drive/Code/R/Shiny/Carbon emissions Shiny_app')
?checkboxGroupInput
unique(LPIdata_Feb2016$biome)
print(unique(LPIdata_Feb2016$biome))
print0(unique(LPIdata_Feb2016$biome))
print(unique(LPIdata_Feb2016$biome))
runApp()
shiny::runApp()
bbox <- c(left = -180, bottom = -70, right = 179, top = 85)
map <- ggmap(get_stamenmap(bbox, zoom = 3, maptype="toner-background"))
ggmap(map)
runApp()
map <- get_map(bbox, zoom = 3, maptype="terrain")
runApp()
ggmap(map)
runApp()
bbox <- c(left = -180, bottom = -70, right = 179, top = 85)
map <- get_stamenmap(bbox, zoom = 3, maptype="terrain")
bbox <- c(left = -180, bottom = -70, right = 179, top = 85)
map <- get_stamenmap(bbox, zoom = 3, maptype="toner")
runApp()
bbox <- c(left = -180, bottom = -70, right = 179, top = 85)
map <- get_googlemap(bbox, zoom = 3, maptype="satellite")
map <- get_map(bbox, zoom = 3)
ggmap(map))
ggmap(map)
runApp()
# John Godlee (johngodlee@gmail.com)
# Packages ----
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(mgcv)
# Set working directory ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load Data ----
load("LPIdata_Feb2016.RData")
LPI <- LPIdata_Feb2016 %>%
gather("year", "pop", 26:70)  %>%  # Transform to long format, gathering each
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(Genus, Species, sep = '_')) %>%  # Create a species column by concatenating genus and species
filter(., is.finite(pop)) %>%  # Keep only rows with a population estimate
distinct(.) %>%  # Remove duplicate rows
group_by(., genus_species, id) %>%  # group rows so that each group is one population (id) from one Species(genus_species)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
ungroup(.) %>%  # Remove groupings
group_by(., genus_species, id, Units) %>%  # Groups Measurement_type(Units)>population(id)>Species(genus_species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
list(
LPI_list <- split(LPI, f = list(LPI$genus_species))
LPI_list[[1]]
View(LPI_list[[1]])
LPI_list <- split(LPI, f = list(LPI$genus_species, LPI$Units))
LPI_list <- split(LPI, f = list(LPI$genus_species, LPI$id))
LPI_list <- split(LPI, interaction(LPI$genus_species, LPI$id), drop = TRUE)
LPI_nest <- LPI %>% nest(genus_species, id)
LPI_nest <- LPI %>% nest(genus_species, id)
LPI_list <- split(LPI, interaction(LPI$genus_species), drop = TRUE)
LPI_list <- split(LPI, interaction(LPI$genus_species, LPI$id), drop = TRUE)
View(LPI_list[[1]])
gam_test <- gam(log10(pop)~year, data = LPI_list[[1]])
summary(gam_test)
plot(gam_test)
results <- lapply(LPI_list, function(x) gam(log10(pop)~year, data = x))
?gam
Q
results <- lapply(LPI_list, function(x) gam, formula = log10(pop)~year)
Q
results <- lapply(LPI_list, gam, formula = log10(pop)~year)
model_list <- lapply(LPI_list, function(x) gam(log10(pop)~year, data = x))
Q
Q
model_list <- lapply(LPI_list, function(x) lm(log10(pop)~year, data = x))
LPI <- LPIdata_Feb2016 %>%
gather("year", "pop", 26:70)  %>%  # Transform to long format, gathering each
mutate(year = parse_number(.$year)) %>%  # Deprecated, extract_numeric() -> parse_numeric() -> parse_number(), extract numeric from atomic
mutate(., genus_species = paste(Genus, Species, sep = '_')) %>%  # Create a species column by concatenating genus and species
filter(., is.finite(pop)) %>% # Keep only rows with a population estimate
distinct(.) %>%  # Remove duplicate rows
group_by(., genus_species, id) %>%  # group rows so that each group is one population (id) from one Species(genus_species)
mutate(., maxyear = max(year), minyear = min(year)) %>%  # Create a column for the max and min years for each group
mutate(., lengthyear = maxyear-minyear) %>%  # Create a column for the length of time data available
filter(., lengthyear > 5) %>%  # Exclude columns where dataset <5 years
ungroup(.) %>%  # Remove groupings
group_by(., genus_species, id, Units) %>%  # Groups Measurement_type(Units)>population(id)>Species(genus_species)
mutate(., scalepop = (pop-min(pop))/(max(pop)-min(pop))) %>%  # Scale population trend from 0 to 1
filter(., is.finite(scalepop)) %>%  # Remove rows without a scalepop
mutate(., meanpop = mean(pop)) %>%  # Create column for mean population
ungroup(.) %>%
group_by(., genus_species, id) %>%
mutate(., meanpop.size = mean(meanpop)) %>%  # Create column for mean mean population
ungroup(.)
LPI_list <- split(LPI, interaction(LPI$genus_species, LPI$id), drop = TRUE)
lm_list <- lapply(LPI_list, function(x) lm(log10(pop)~year, data = x))
Q
